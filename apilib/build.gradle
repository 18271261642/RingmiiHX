apply plugin: 'com.android.library'
def andr = rootProject.ext.android
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion andr.compileSdkVersion
    defaultConfig {
        minSdkVersion andr.minSdkVersion
        targetSdkVersion andr.targetSdkVersion
        versionCode 1
        versionName "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (rootProject.isMcu) {
                buildConfigField("String", "APIURL", '"http://apihealth.mcu.edu.tw/"')
                buildConfigField("String", "APIHDURL", '"http://apihdhealth.mcu.edu.tw/"')
            } else if (rootProject.googlePlay) { // 国际版
                buildConfigField("String", "APIURL", '"http://api.guidertech.com/"')
                buildConfigField("String", "APIHDURL", '"http://apihd.guidertech.com/"')
                println "apilib -- Package Google Play Bundle Release . . ."
            } else { // 大陆版
                buildConfigField("String", "APIURL", '"https://api.guiderhealth.com/"')
                buildConfigField("String", "APIHDURL", '"https://apihd.guiderhealth.com/"')

                println "apilib -- Package CN Bundle Release . . ."
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (rootProject.isMcu) {
                buildConfigField("String", "APIURL", '"http://apihealth.mcu.edu.tw/"')
                buildConfigField("String", "APIHDURL", '"http://apihdhealth.mcu.edu.tw/"')
            } else if (rootProject.googlePlay) { // 国际版
                buildConfigField("String", "APIURL", '"http://api.guidertech.com/"')
                buildConfigField("String", "APIHDURL", '"http://apihd.guidertech.com/"')
//                 buildConfigField("String", "APIURL", '"http://192.168.1.181:8082/"')
//                 buildConfigField("String", "APIHDURL", '"http://192.168.1.181:8083/"')
                println "apilib -- Package Google Play Bundle Debug . . ."
            } else { // 大陆版
                buildConfigField("String", "APIURL", '"https://api.guiderhealth.com/"')
                buildConfigField("String", "APIHDURL", '"https://apihd.guiderhealth.com/"')
                // buildConfigField("String", "APIURL", '"http://192.168.1.180:8082/"')
                // buildConfigField("String", "APIHDURL", '"http://192.168.1.180:8083/"')
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'

    // https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
    api 'com.squareup.retrofit2:retrofit:2.9.0'
    // https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-gson
    api group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.9.0'
    api 'com.squareup.okhttp3:logging-interceptor:4.8.1'
    // https://mvnrepository.com/artifact/org.glassfish/javax.annotation
    api group: 'org.glassfish', name: 'javax.annotation', version: '10.0-b28'
    // Logger
    api 'com.orhanobut:logger:2.2.0'

    // https://mvnrepository.com/artifact/joda-time/joda-time
    api group: 'joda-time', name: 'joda-time', version: '2.10.6'

}
