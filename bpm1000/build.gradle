//apply plugin: 'com.android.application'
apply plugin: 'com.android.library'
def andr = rootProject.ext.android
def librarys = rootProject.ext.dependencies

android {
    compileSdkVersion andr.compileSdkVersion
    defaultConfig {
//        applicationId "com.guider.health.bp"
        minSdkVersion andr.minSdkVersion
        targetSdkVersion andr.targetSdkVersion
        versionCode andr.versionCode
        versionName andr.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
                arguments = [moduleName: project.getName()]
            }
        }

//        buildConfigField("boolean", "isLibrary", String.valueOf(isLibrary))
//
//        sourceSets{
//            main{
//                if (isLibrary){
//                    Manifest.srcFile 'src/main/lib_manifest/AndroidManifest.xml'
//                }else {
//                    Manifest.srcFile 'src/main/AndroidManifest.xml'
//                    java.srcDirs 'src/main/lib_manifest/java', 'src/main/java'
//
//                }
//            }
//        }

        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    repositories {
        flatDir {
            dirs 'libs'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(name: 'healthkits-release', ext: 'aar')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //librarys.each { k, v -> api v }
    annotationProcessor project(':arouter-compiler')
    //api的方式有传递性
    implementation project(':arouter-core')
    implementation project(':common')
    compile project(':bluetooth')
    compile project(':fragmentation_core')
    implementation files('libs/d2xx.jar')
    implementation project(path: ':simpleble')
}
